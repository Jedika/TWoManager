# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CheckTokenOutput {
  exp: Int!
  iat: Int!
  login: String!
  photo: String
  status: Boolean!
  type: String!
  userId: ID!
  userName: String!
}

type Client {
  clientId: ID!
  clientName: String!
  contact: String
  domicile: String
}

input ClientAddInput {
  clientId: ID
  clientName: String!
  contact: String
  domicile: String
}

type ClientsCollaborateResult {
  clients: [Client!]!
  paginationMeta: PaginationMeta!
}

input ClientUpdateInput {
  clientId: ID!
  clientName: String!
  contact: String
  domicile: String
}

type Convocation {
  atTown: String!
  convokeOn: DateTime!
  id: ID!
  namePersConv: String!
  numRegister: Float!
  numRequisition: String!
}

input ConvocationAddInput {
  atTown: String!
  convokeOn: DateTime!
  folderId: Float!
  namePersConv: String!
  numRegister: Float!
  numRequisition: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Facture {
  dateFacture: Float!
  factureId: ID!
}

type Folder {
  client: Client!
  dateTrav: DateTime!
  facture: Facture
  fokontany: String!
  folderId: ID!
  groundName: String!
  localisationTrav: String!
  numTitle: String
  price: Float
  register: String!
  typeTrav: String!
  user: User
}

input FolderAddInput {
  clientId: Float!
  dateTrav: DateTime!
  factureId: Float
  fokontany: String!
  folderId: ID
  groundName: String!
  localisationTrav: String!
  numTitle: String
  price: Float
  register: String!
  typeTrav: String!
  userId: Float
}

input FoldersFilterInput {
  groundName: String
  numTitle: String
  register: String
}

type FoldersResult {
  folders: [Folder!]!
  paginationMeta: PaginationMeta!
}

input FolderUpdateInput {
  clientId: Float!
  dateTrav: DateTime!
  factureId: Float
  fokontany: String!
  folderId: ID!
  groundName: String!
  localisationTrav: String!
  numTitle: String
  price: Float
  register: String!
  typeTrav: String!
  userId: Float
}

type Letter {
  dateRtx: DateTime!
  folder: Folder
  id: ID!
  letterTown: String!
  numRtx: String!
  object: String!
}

input LetterAddInput {
  dateRtx: DateTime!
  folderId: Float!
  id: ID
  letterTown: String!
  numRtx: String!
  object: String!
}

input LetterUpdateInput {
  dateRtx: DateTime!
  folderId: Float!
  id: ID
  letterTown: String!
  numRtx: String!
  object: String!
}

input LogInInput {
  login: String!
  password: String!
}

type LogInOutput {
  token: String
  type: String
}

type Mutation {
  addClientByUser(input: ClientAddInput!): Client!
  addConvocation(input: ConvocationAddInput!): Convocation!
  addFolder(input: FolderAddInput!): Folder!
  addLetter(input: LetterAddInput!): Letter!
  addPv(input: PvAddInput!): Pv!
  checkToken(input: String!): CheckTokenOutput!
  login(input: LogInInput!): LogInOutput!
  loginSession(input: LogInInput!): Boolean!
  register(input: RegisterInput!): UserOutput!
  updateClient(input: ClientUpdateInput!): Client!
  updateFolder(input: FolderUpdateInput!): Folder!
  updateLetter(input: LetterUpdateInput!): Letter!
  uploadFile(file: Upload!, login: String!): Boolean!
}

input PaginationInput {
  limit: Float!
  page: Float!
}

type PaginationMeta {
  currentPage: Float!
  itemCount: Float!
  itemsPerPage: Float!
  totalItems: Float!
  totalPages: Float!
}

type Pv {
  attachments: String!
  cause: String!
  commune: String!
  district: String!
  folder: Folder
  pvId: ID!
  region: String!
}

input PvAddInput {
  attachments: String
  cause: String
  commune: String
  district: String
  folderId: Float!
  region: String
}

type Query {
  userClients(paginationInput: PaginationInput!): ClientsCollaborateResult!
  userFolders(foldersFilterInput: FoldersFilterInput!, paginationInput: PaginationInput!): FoldersResult!
  users: [User!]
  usersCount: Int!
}

input RegisterInput {
  login: String!
  password: String!
  photo: String
  userName: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  folders: [Folder!]!
  login: String!
  password: String!
  photo: String
  status: Boolean
  type: String
  userId: ID!
  userName: String!
}

type UserOutput {
  login: String!
  photo: String
  status: Boolean
  type: String
  userId: ID!
  userName: String!
}
